# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Adjustment."
interface Adjustment {
    amount: String!
    createdAt: ISO8601DateTime
    eligible: Boolean!
    label: String!
    updatedAt: ISO8601DateTime
}

"An object with an ID."
interface Node {
    "ID of the object."
    id: ID!
}

"Payment Source."
interface PaymentSource {
    createdAt: ISO8601DateTime
    paymentMethod: PaymentMethod!
    updatedAt: ISO8601DateTime
}

"Autogenerated return type of AddAddressesToCheckout"
type AddAddressesToCheckoutPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of AddPaymentToCheckout"
type AddPaymentToCheckoutPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of AddToCart"
type AddToCartPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Address."
type Address implements Node {
    address1: String!
    address2: String
    alternativePhone: String
    city: String!
    company: String
    country: Country!
    createdAt: ISO8601DateTime
    firstname: String!
    id: ID!
    lastname: String
    phone: String!
    state: State
    stateName: String
    updatedAt: ISO8601DateTime
    zipcode: String!
}

"The connection type for Address."
type AddressConnection {
    "A list of edges."
    edges: [AddressEdge]
    "A list of nodes."
    nodes: [Address]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AddressEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Address
}

"The connection type for Adjustment."
type AdjustmentConnection {
    "A list of edges."
    edges: [AdjustmentEdge]
    "A list of nodes."
    nodes: [Adjustment]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AdjustmentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Adjustment
}

"Autogenerated return type of AdvanceCheckout"
type AdvanceCheckoutPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of ApplyCouponCode"
type ApplyCouponCodePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of CompleteCheckout"
type CompleteCheckoutPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Country."
type Country implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    iso: String!
    iso3: String!
    isoName: String!
    name: String!
    numcode: Int!
    states(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): StateConnection!
    statesRequired: Boolean!
    updatedAt: ISO8601DateTime
}

"The connection type for Country."
type CountryConnection {
    "A list of edges."
    edges: [CountryEdge]
    "A list of nodes."
    nodes: [Country]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CountryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Country
}

"Autogenerated return type of CreateOrder"
type CreateOrderPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Credit Card."
type CreditCard implements Node & PaymentSource {
    address: Address!
    ccType: String
    createdAt: ISO8601DateTime
    id: ID!
    lastDigits: String!
    month: String!
    name: String!
    paymentMethod: PaymentMethod!
    updatedAt: ISO8601DateTime
    year: String!
}

"Currency."
type Currency implements Node {
    htmlEntity: String!
    id: ID!
    isoCode: String!
    name: String!
    symbol: String!
}

"The connection type for Currency."
type CurrencyConnection {
    "A list of edges."
    edges: [CurrencyEdge]
    "A list of nodes."
    nodes: [Currency]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type CurrencyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Currency
}

"Autogenerated return type of EmptyCart"
type EmptyCartPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Image."
type Image implements Node {
    alt: String
    createdAt: ISO8601DateTime
    filename: String!
    id: ID!
    largeUrl: String!
    miniUrl: String!
    position: Int!
    productUrl: String!
    smallUrl: String!
    updatedAt: ISO8601DateTime
}

"The connection type for Image."
type ImageConnection {
    "A list of edges."
    edges: [ImageEdge]
    "A list of nodes."
    nodes: [Image]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ImageEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Image
}

"Line item."
type LineItem implements Node {
    additionalTaxTotal: Float!
    adjustmentTotal: Float!
    amount: Float!
    createdAt: ISO8601DateTime
    currency: String!
    hasSufficientStock: Boolean!
    id: ID!
    includedTaxTotal: Float!
    price: Float!
    promoTotal: Float!
    quantity: Int!
    updatedAt: ISO8601DateTime
    variant: Variant!
}

"The connection type for LineItem."
type LineItemConnection {
    "A list of edges."
    edges: [LineItemEdge]
    "A list of nodes."
    nodes: [LineItem]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type LineItemEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: LineItem
}

"Shipping Manifest Item."
type ManifestItem {
    quantity: Int!
    variant: Variant!
}

"Autogenerated return type of MarkDefaultAddress"
type MarkDefaultAddressPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    user: User
}

type Mutation {
    addAddressesToCheckout(
        "Parameters for AddAddressesToCheckout"
        input: AddAddressesToCheckoutInput!
    ): AddAddressesToCheckoutPayload
    addPaymentToCheckout(
        "Parameters for AddPaymentToCheckout"
        input: AddPaymentToCheckoutInput!
    ): AddPaymentToCheckoutPayload
    addToCart(
        "Parameters for AddToCart"
        input: AddToCartInput!
    ): AddToCartPayload
    advanceCheckout(
        "Parameters for AdvanceCheckout"
        input: AdvanceCheckoutInput!
    ): AdvanceCheckoutPayload
    applyCouponCode(
        "Parameters for ApplyCouponCode"
        input: ApplyCouponCodeInput!
    ): ApplyCouponCodePayload
    completeCheckout(
        "Parameters for CompleteCheckout"
        input: CompleteCheckoutInput!
    ): CompleteCheckoutPayload
    createOrder(
        "Parameters for CreateOrder"
        input: CreateOrderInput!
    ): CreateOrderPayload
    emptyCart(
        "Parameters for EmptyCart"
        input: EmptyCartInput!
    ): EmptyCartPayload
    markDefaultAddress(
        "Parameters for MarkDefaultAddress"
        input: MarkDefaultAddressInput!
    ): MarkDefaultAddressPayload
    nextCheckoutState(
        "Parameters for NextCheckoutState"
        input: NextCheckoutStateInput!
    ): NextCheckoutStatePayload
    removeFromAddressBook(
        "Parameters for RemoveFromAddressBook"
        input: RemoveFromAddressBookInput!
    ): RemoveFromAddressBookPayload
    removeFromCart(
        "Parameters for RemoveFromCart"
        input: RemoveFromCartInput!
    ): RemoveFromCartPayload
    saveInAddressBook(
        "Parameters for SaveInAddressBook"
        input: SaveInAddressBookInput!
    ): SaveInAddressBookPayload
    selectShippingRate(
        "Parameters for SelectShippingRate"
        input: SelectShippingRateInput!
    ): SelectShippingRatePayload
    setOrderEmail(
        "Parameters for SetOrderEmail"
        input: SetOrderEmailInput!
    ): SetOrderEmailPayload
    updateCartQuantity(
        "Parameters for UpdateCartQuantity"
        input: UpdateCartQuantityInput!
    ): UpdateCartQuantityPayload
}

"Autogenerated return type of NextCheckoutState"
type NextCheckoutStatePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"OptionType Type."
type OptionType implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    name: String!
    optionValues(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): OptionValueConnection!
    position: Int!
    presentation: String!
    updatedAt: ISO8601DateTime
}

"The connection type for OptionType."
type OptionTypeConnection {
    "A list of edges."
    edges: [OptionTypeEdge]
    "A list of nodes."
    nodes: [OptionType]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type OptionTypeEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: OptionType
}

"OptionValue."
type OptionValue implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    name: String!
    position: String!
    presentation: String!
    updatedAt: ISO8601DateTime
}

"The connection type for OptionValue."
type OptionValueConnection {
    "A list of edges."
    edges: [OptionValueEdge]
    "A list of nodes."
    nodes: [OptionValue]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type OptionValueEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: OptionValue
}

"Order."
type Order implements Node {
    additionalTaxTotal: String!
    adjustmentTotal: String!
    adjustments(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): AdjustmentConnection!
    approvedAt: ISO8601DateTime
    availablePaymentMethods: [PaymentMethod!]!
    billingAddress: Address
    canceledAt: ISO8601DateTime
    completedAt: ISO8601DateTime
    confirmationDelivered: Boolean!
    createdAt: ISO8601DateTime
    currency: String!
    email: String
    guestToken: String
    id: ID!
    includedTaxTotal: String!
    itemTotal: String!
    lineItems(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): LineItemConnection!
    number: String!
    paymentState: String!
    paymentTotal: String!
    payments: [Payment!]!
    promoTotal: String!
    shipmentState: String!
    shipmentTotal: String!
    shipments(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): ShipmentConnection!
    shippingAddress: Address
    specialInstructions: String
    state: String!
    total: String!
    updatedAt: ISO8601DateTime
}

"The connection type for Order."
type OrderConnection {
    "A list of edges."
    edges: [OrderEdge]
    "A list of nodes."
    nodes: [Order]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type OrderEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Order
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Payment."
type Payment implements Node {
    amount: String
    createdAt: ISO8601DateTime
    id: ID!
    paymentSource: PaymentSource
    state: String!
    updatedAt: ISO8601DateTime
}

"Payment Method."
type PaymentMethod implements Node {
    createdAt: ISO8601DateTime
    description: String
    id: ID!
    name: String!
    position: String!
    updatedAt: ISO8601DateTime
}

"Price."
type Price implements Node {
    amount: String!
    countryIso: String
    createdAt: ISO8601DateTime
    currency: Currency!
    displayAmount: String!
    displayCountry: String!
    id: ID!
    updatedAt: ISO8601DateTime
}

"The connection type for Price."
type PriceConnection {
    "A list of edges."
    edges: [PriceEdge]
    "A list of nodes."
    nodes: [Price]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type PriceEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Price
}

"Product."
type Product implements Node {
    createdAt: ISO8601DateTime
    description: String
    id: ID!
    masterVariant: Variant!
    metaDescription: String
    metaKeywords: String
    metaTitle: String
    name: String!
    optionTypes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): OptionTypeConnection!
    productProperties(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): ProductPropertyConnection!
    slug: String!
    updatedAt: ISO8601DateTime
    variants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): VariantConnection!
}

"The connection type for Product."
type ProductConnection {
    "A list of edges."
    edges: [ProductEdge]
    "A list of nodes."
    nodes: [Product]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ProductEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Product
}

"Product Property."
type ProductProperty implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    position: Int!
    property: Property
    updatedAt: ISO8601DateTime
    value: String
}

"The connection type for ProductProperty."
type ProductPropertyConnection {
    "A list of edges."
    edges: [ProductPropertyEdge]
    "A list of nodes."
    nodes: [ProductProperty]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ProductPropertyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ProductProperty
}

"PromotionAdjustment."
type PromotionAdjustment implements Adjustment & Node {
    amount: String!
    createdAt: ISO8601DateTime
    eligible: Boolean!
    id: ID!
    label: String!
    promotionCode: String
    updatedAt: ISO8601DateTime
}

"Property."
type Property implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    name: String!
    presentation: String!
    updatedAt: ISO8601DateTime
}

type Query {
    "Customer Completed Orders."
    completedOrders(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): OrderConnection!
    "Supported Countries."
    countries(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): CountryConnection!
    "Current Order."
    currentOrder: Order
    "Current Store."
    currentStore: Store
    "Current logged User."
    currentUser: User
    "Fetches an object given its ID."
    node(
        "ID of the object."
        id: ID!
    ): Node
    "Fetches a list of objects given a list of IDs."
    nodes(
        "IDs of the objects."
        ids: [ID!]!
    ): [Node]!
    "Find a product by its slug."
    productBySlug(slug: String!): Product
    "Supported Products."
    products(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        query: ProductsQueryInput
    ): ProductConnection!
    "Supported Taxonomies."
    taxonomies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): TaxonomyConnection!
}

"Autogenerated return type of RemoveFromAddressBook"
type RemoveFromAddressBookPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    user: User
}

"Autogenerated return type of RemoveFromCart"
type RemoveFromCartPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of SaveInAddressBook"
type SaveInAddressBookPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    user: User
}

"Autogenerated return type of SelectShippingRate"
type SelectShippingRatePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Autogenerated return type of SetOrderEmail"
type SetOrderEmailPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"Order Shipment."
type Shipment implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    manifest: [ManifestItem!]!
    number: String!
    shippedAt: ISO8601DateTime
    shippingRates(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): ShippingRateConnection!
    state: String!
    tracking: String
    trackingUrl: String
    updatedAt: ISO8601DateTime
}

"The connection type for Shipment."
type ShipmentConnection {
    "A list of edges."
    edges: [ShipmentEdge]
    "A list of nodes."
    nodes: [Shipment]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ShipmentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Shipment
}

"Shipping Rate."
type ShippingRate implements Node {
    cost: String!
    createdAt: ISO8601DateTime
    currency: String!
    id: ID!
    selected: Boolean!
    updatedAt: ISO8601DateTime
}

"The connection type for ShippingRate."
type ShippingRateConnection {
    "A list of edges."
    edges: [ShippingRateEdge]
    "A list of nodes."
    nodes: [ShippingRate]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ShippingRateEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ShippingRate
}

"State."
type State implements Node {
    abbr: String!
    createdAt: ISO8601DateTime
    id: ID!
    name: String!
    updatedAt: ISO8601DateTime
}

"The connection type for State."
type StateConnection {
    "A list of edges."
    edges: [StateEdge]
    "A list of nodes."
    nodes: [State]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type StateEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: State
}

"Store."
type Store implements Node {
    cartTaxCountryIso: String
    code: String!
    createdAt: ISO8601DateTime
    currencies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): CurrencyConnection!
    default: Boolean!
    defaultCurrency: String
    id: ID!
    mailFromAddress: String!
    metaDescription: String
    metaKeywords: String
    name: String!
    seoTitle: String
    updatedAt: ISO8601DateTime
    url: String!
}

"TaxAdjustment."
type TaxAdjustment implements Adjustment & Node {
    amount: String!
    createdAt: ISO8601DateTime
    eligible: Boolean!
    id: ID!
    label: String!
    updatedAt: ISO8601DateTime
}

"Taxon."
type Taxon implements Node {
    children(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): TaxonConnection
    createdAt: ISO8601DateTime
    description: String
    iconUrl: String
    id: ID!
    metaDescription: String
    metaKeywords: String
    metaTitle: String
    name: String!
    parentTaxon: Taxon
    permalink: String!
    updatedAt: ISO8601DateTime
}

"The connection type for Taxon."
type TaxonConnection {
    "A list of edges."
    edges: [TaxonEdge]
    "A list of nodes."
    nodes: [Taxon]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type TaxonEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Taxon
}

"Taxonomy."
type Taxonomy implements Node {
    createdAt: ISO8601DateTime
    id: ID!
    name: String!
    rootTaxon: Taxon
    taxons(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): TaxonConnection!
    updatedAt: ISO8601DateTime
}

"The connection type for Taxonomy."
type TaxonomyConnection {
    "A list of edges."
    edges: [TaxonomyEdge]
    "A list of nodes."
    nodes: [Taxonomy]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type TaxonomyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Taxonomy
}

"Autogenerated return type of UpdateCartQuantity"
type UpdateCartQuantityPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    errors: [UserError!]!
    order: Order
}

"User."
type User implements Node {
    addresses(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): AddressConnection!
    billAddress: Address
    createdAt: ISO8601DateTime
    currentSignInAt: ISO8601DateTime
    defaultAddress: Address
    email: String!
    id: ID!
    lastSignInAt: ISO8601DateTime
    login: String
    shipAddress: Address
    signInCount: Int!
    spreeApiKey: String
    updatedAt: ISO8601DateTime
    wallet(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): WalletPaymentSourceConnection!
}

"A user-readable error"
type UserError {
    "A description of the error"
    message: String!
    "Which input value this error came from"
    path: [String!]
}

"Variant."
type Variant implements Node {
    createdAt: ISO8601DateTime
    defaultPrice: Price!
    depth: String
    height: String
    id: ID!
    images(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): ImageConnection!
    isMaster: Boolean!
    optionValues(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): OptionValueConnection!
    position: Int!
    prices(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): PriceConnection!
    sku: String!
    updatedAt: ISO8601DateTime
    weight: String!
    width: String
}

"The connection type for Variant."
type VariantConnection {
    "A list of edges."
    edges: [VariantEdge]
    "A list of nodes."
    nodes: [Variant]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type VariantEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Variant
}

"Wallet Payment Source."
type WalletPaymentSource implements Node {
    createdAt: ISO8601DateTime
    default: Boolean!
    id: ID!
    paymentSource: PaymentSource
    updatedAt: ISO8601DateTime
}

"The connection type for WalletPaymentSource."
type WalletPaymentSourceConnection {
    "A list of edges."
    edges: [WalletPaymentSourceEdge]
    "A list of nodes."
    nodes: [WalletPaymentSource]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type WalletPaymentSourceEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: WalletPaymentSource
}

"Autogenerated input type of AddAddressesToCheckout"
input AddAddressesToCheckoutInput {
    billingAddress: AddressInput!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    shipToBillingAddress: Boolean
    shippingAddress: AddressInput
}

"Autogenerated input type of AddPaymentToCheckout"
input AddPaymentToCheckoutInput {
    amount: Float
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    paymentMethodId: ID!
    source: Json
}

"Autogenerated input type of AddToCart"
input AddToCartInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    quantity: Int!
    variantId: ID!
}

"Address."
input AddressInput {
    address1: String!
    address2: String
    alternativePhone: String
    city: String!
    company: String
    countryId: ID!
    firstname: String!
    lastname: String
    phone: String!
    stateId: ID
    stateName: String
    zipcode: String!
}

"Autogenerated input type of AdvanceCheckout"
input AdvanceCheckoutInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of ApplyCouponCode"
input ApplyCouponCodeInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    couponCode: String!
}

"Autogenerated input type of CompleteCheckout"
input CompleteCheckoutInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of CreateOrder"
input CreateOrderInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of EmptyCart"
input EmptyCartInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of MarkDefaultAddress"
input MarkDefaultAddressInput {
    addressId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of NextCheckoutState"
input NextCheckoutStateInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Params for searching products."
input ProductsQueryInput {
    "Keywords"
    keywords: String
    "Search"
    search: Json
    "Taxon"
    taxon: ID
}

"Autogenerated input type of RemoveFromAddressBook"
input RemoveFromAddressBookInput {
    addressId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of RemoveFromCart"
input RemoveFromCartInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    lineItemId: ID!
}

"Autogenerated input type of SaveInAddressBook"
input SaveInAddressBookInput {
    address: AddressInput!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    default: Boolean
}

"Autogenerated input type of SelectShippingRate"
input SelectShippingRateInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    shippingRateId: ID!
}

"Autogenerated input type of SetOrderEmail"
input SetOrderEmailInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    email: String!
}

"Autogenerated input type of UpdateCartQuantity"
input UpdateCartQuantityInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    lineItemId: ID!
    quantity: Int!
}


"An ISO 8601-encoded datetime"
scalar ISO8601DateTime

"Represents untyped JSON"
scalar Json
